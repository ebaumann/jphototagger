package org.jphototagger.iptcmodule;

import java.awt.Component;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ResourceBundle;

import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.LayoutStyle.ComponentPlacement;

import org.bushe.swing.event.annotation.AnnotationProcessor;
import org.bushe.swing.event.annotation.EventSubscriber;

import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;

import org.jphototagger.api.preferences.Preferences;
import org.jphototagger.api.preferences.PreferencesChangedEvent;
import org.jphototagger.api.windows.OptionPageProvider;
import org.jphototagger.iptc.IptcPreferencesKeys;
import org.jphototagger.lib.util.Bundle;

/**
 * @author Elmar Baumann
 */
@ServiceProvider(service = OptionPageProvider.class)
public class IptcSettingsPanel extends javax.swing.JPanel implements OptionPageProvider {

    private static final long serialVersionUID = 1L;

    public IptcSettingsPanel() {
        initComponents();
        postInitComponents();
    }

    private void postInitComponents() {
        setIptcCharsetFromPreferences();
        setDisplayIptcFromPreferences();
        AnnotationProcessor.process(this);
    }

    private void setSelectedIptcCharsetToPreferences() {
        String charset = comboBoxIptcCharset.getSelectedItem().toString();
        Preferences preferences = Lookup.getDefault().lookup(Preferences.class);

        preferences.setString(IptcPreferencesKeys.KEY_IPTC_CHARSET, charset);
    }

    private void setIptcCharsetFromPreferences() {
        Preferences prefs = Lookup.getDefault().lookup(Preferences.class);
        String charset = prefs.getString(IptcPreferencesKeys.KEY_IPTC_CHARSET);

        String iptcCharSet = charset.isEmpty()
                ? "ISO-8859-1"
                : charset;
        comboBoxIptcCharset.getModel().setSelectedItem(iptcCharSet);
    }

    @EventSubscriber(eventClass = PreferencesChangedEvent.class)
    public void preferencesChanged(PreferencesChangedEvent evt) {
        if (IptcPreferencesKeys.KEY_IPTC_CHARSET.equals(evt.getKey())) {
            setIptcCharsetFromPreferences();
        } else if (IptcPreferencesKeys.KEY_DISPLAY_IPTC.equals(evt.getKey())) {
            setDisplayIptcFromPreferences();
        }
    }

    private void setDisplayIptcToPreferences() {
        boolean display = checkBoxDisplayIptc.isSelected();
        Preferences preferences = Lookup.getDefault().lookup(Preferences.class);

        preferences.setBoolean(IptcPreferencesKeys.KEY_DISPLAY_IPTC, display);
    }

    private void setDisplayIptcFromPreferences() {
        Preferences preferences = Lookup.getDefault().lookup(Preferences.class);

        boolean isPreferred = preferences.containsKey(IptcPreferencesKeys.KEY_DISPLAY_IPTC)
                ? preferences.getBoolean(IptcPreferencesKeys.KEY_DISPLAY_IPTC)
                : false;

        checkBoxDisplayIptc.setSelected(isPreferred);
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public String getTitle() {
        return Bundle.getString(IptcSettingsPanel.class, "IptcSettingsPanel.Title");
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    @Override
    public boolean isMiscOptionPage() {
        return true;
    }

    @Override
    public int getPosition() {
        return 1;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        comboBoxIptcCharset = new JComboBox();
        labelIptcCharset = new JLabel();
        checkBoxDisplayIptc = new JCheckBox();

        setName("Form"); // NOI18N

        comboBoxIptcCharset.setModel(new IptcCharsetComboBoxModel());
        comboBoxIptcCharset.setName("comboBoxIptcCharset"); // NOI18N
        comboBoxIptcCharset.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                comboBoxIptcCharsetActionPerformed(evt);
            }
        });

        ResourceBundle bundle = ResourceBundle.getBundle("org/jphototagger/iptcmodule/Bundle"); // NOI18N
        labelIptcCharset.setText(bundle.getString("IptcSettingsPanel.labelIptcCharset.text")); // NOI18N
        labelIptcCharset.setName("labelIptcCharset"); // NOI18N

        checkBoxDisplayIptc.setText(bundle.getString("IptcSettingsPanel.checkBoxDisplayIptc.text")); // NOI18N
        checkBoxDisplayIptc.setName("checkBoxDisplayIptc"); // NOI18N
        checkBoxDisplayIptc.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                checkBoxDisplayIptcActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelIptcCharset)
                        .addGap(5, 5, 5)
                        .addComponent(comboBoxIptcCharset, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addComponent(checkBoxDisplayIptc))
                .addContainerGap(94, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(labelIptcCharset))
                    .addComponent(comboBoxIptcCharset, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(ComponentPlacement.UNRELATED)
                .addComponent(checkBoxDisplayIptc)
                .addContainerGap(148, Short.MAX_VALUE))
        );
    }//GEN-END:initComponents

    private void comboBoxIptcCharsetActionPerformed(ActionEvent evt) {//GEN-FIRST:event_comboBoxIptcCharsetActionPerformed
        setSelectedIptcCharsetToPreferences();
    }//GEN-LAST:event_comboBoxIptcCharsetActionPerformed

    private void checkBoxDisplayIptcActionPerformed(ActionEvent evt) {//GEN-FIRST:event_checkBoxDisplayIptcActionPerformed
        setDisplayIptcToPreferences();
    }//GEN-LAST:event_checkBoxDisplayIptcActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JCheckBox checkBoxDisplayIptc;
    private JComboBox comboBoxIptcCharset;
    private JLabel labelIptcCharset;
    // End of variables declaration//GEN-END:variables
}
