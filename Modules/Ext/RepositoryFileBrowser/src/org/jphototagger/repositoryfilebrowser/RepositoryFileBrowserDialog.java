package org.jphototagger.repositoryfilebrowser;

import java.awt.Image;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.Collection;
import java.util.List;
import javax.swing.SwingWorker;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import org.jphototagger.api.core.Branding;
import org.jphototagger.api.image.ThumbnailProvider;
import org.jphototagger.domain.repository.ImageFileRepository;
import org.jphototagger.lib.componentutil.ComponentUtil;
import org.jphototagger.lib.dialog.Dialog;
import org.jphototagger.lib.lookup.LookupAction;
import org.jphototagger.lib.util.CollectionUtil;
import org.openide.util.Lookup;

/**
 *
 *
 * @author Elmar Baumann
 */
public class RepositoryFileBrowserDialog extends Dialog {

    private static final long serialVersionUID = 1L;
    private final DisplayImageAction displayImageAction;

    public RepositoryFileBrowserDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        displayImageAction = new DisplayImageAction(listFiles.getLookup());
        postInitComponents();
    }

    private void postInitComponents() {
        listFiles.addListSelectionListener(listSelectionListener);
    }

    private void insertImageFiles() {
        LookupImageFilesSwingWorker task = new LookupImageFilesSwingWorker();

        task.execute();
    }

    private class LookupImageFilesSwingWorker extends SwingWorker<Void, FileNode> {

        @Override
        protected Void doInBackground() throws Exception {
            ImageFileRepository repo = Lookup.getDefault().lookup(ImageFileRepository.class);
            Collection<? extends File> imageFiles = repo.getAllImageFiles();

            for (File imageFile : imageFiles) {
                FileNode node = new FileNode(imageFile);

                publish(node);
            }

            return null;
        }

        @Override
        protected void process(List<FileNode> nodes) {
            for (FileNode node : nodes) {
                listFiles.addNode(node);
            }
        }
    }

    private class DisplayImageAction extends LookupAction<FileNode> {

        private static final long serialVersionUID = 1L;

        private DisplayImageAction(Lookup lookup) {
            super(FileNode.class, lookup);
        }

        @Override
        protected boolean isEnabled(Collection<? extends FileNode> lookupContent) {
            return lookupContent.size() == 1;
        }

        @Override
        public void actionPerformed(Collection<? extends FileNode> lookupContent) {
            FileNode fileNode = CollectionUtil.getFirstElement(lookupContent);
            Image thumbnail = null;

            if (fileNode != null) {
                ThumbnailProvider thumbnailProvider = Lookup.getDefault().lookup(ThumbnailProvider.class);
                File file = fileNode.getFile();
                thumbnail = thumbnailProvider.getThumbnail(file);
            }

            imagePanel.setImage(thumbnail);
            ComponentUtil.forceRepaint(imagePanel);
        }
    }
    private ListSelectionListener listSelectionListener = new ListSelectionListener() {

        @Override
        public void valueChanged(ListSelectionEvent e) {
            if (!e.getValueIsAdjusting() && displayImageAction.isEnabled()) {
                displayImageAction.actionPerformed((ActionEvent) null);
            }
        }
    };

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            insertImageFiles();
        }

        super.setVisible(visible);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        scrollPane = new javax.swing.JScrollPane();
        listFiles = new org.jphototagger.lib.lookup.NodeLookupList();
        panelBorder = new javax.swing.JPanel();
        imagePanel = new org.jphototagger.lib.component.ImagePanel();
        panelDetails = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jphototagger/repositoryfilebrowser/Bundle"); // NOI18N
        setTitle(bundle.getString("RepositoryFileBrowserDialog.title")); // NOI18N
        setIconImages(Lookup.getDefault().lookup(Branding.class).getAppIcons());

        scrollPane.setViewportView(listFiles);

        imagePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("RepositoryFileBrowserDialog.imagePanel.border.title"))); // NOI18N

        javax.swing.GroupLayout imagePanelLayout = new javax.swing.GroupLayout(imagePanel);
        imagePanel.setLayout(imagePanelLayout);
        imagePanelLayout.setHorizontalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );
        imagePanelLayout.setVerticalGroup(
            imagePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 264, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout panelBorderLayout = new javax.swing.GroupLayout(panelBorder);
        panelBorder.setLayout(panelBorderLayout);
        panelBorderLayout.setHorizontalGroup(
            panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        panelBorderLayout.setVerticalGroup(
            panelBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorderLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(imagePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        panelDetails.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("RepositoryFileBrowserDialog.panelDetails.border.title"))); // NOI18N

        javax.swing.GroupLayout panelDetailsLayout = new javax.swing.GroupLayout(panelDetails);
        panelDetails.setLayout(panelDetailsLayout);
        panelDetailsLayout.setHorizontalGroup(
            panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 249, Short.MAX_VALUE)
        );
        panelDetailsLayout.setVerticalGroup(
            panelDetailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 288, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 752, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(panelBorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(panelDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelDetails, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(panelBorder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                RepositoryFileBrowserDialog dialog = new RepositoryFileBrowserDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.jphototagger.lib.component.ImagePanel imagePanel;
    private org.jphototagger.lib.lookup.NodeLookupList listFiles;
    private javax.swing.JPanel panelBorder;
    private javax.swing.JPanel panelDetails;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
