package org.jphototagger.findduplicates;

import java.io.File;
import java.util.Comparator;
import java.util.List;
import javax.swing.DefaultListModel;
import javax.swing.ListModel;
import javax.swing.event.ListDataListener;
import org.jphototagger.api.preferences.Preferences;
import org.jphototagger.lib.io.FileUtil;
import org.jphototagger.lib.swing.Dialog;
import org.jphototagger.lib.swing.util.ComponentUtil;
import org.jphototagger.lib.swing.util.ListUtil;
import org.openide.util.Lookup;

/**
 * @author Elmar Baumann
 */
public class FindDuplicatesDialog extends Dialog {

    static final FindDuplicatesDialog INSTANCE = new FindDuplicatesDialog();
    private static final String KEY_SOURCE_DIRS = "FindDuplicatesDialog.SourceDirectories";
    private static final String KEY_SOURCE_DIRS_RECURSIVE = "FindDuplicatesDialog.SourceDirectoriesRecursive";
    private static final String KEY_COMPARE_ONLY_EQUAL_DATES = "FindDuplicatesDialog.CompareOnlyEqualDates";
    private final Preferences prefs = Lookup.getDefault().lookup(Preferences.class);
    private final SourceDirectoriesListModel sourceDirectoriesListModel = new SourceDirectoriesListModel();

    private FindDuplicatesDialog() {
        super(ComponentUtil.findFrameWithIcon(), false);
        initComponents();
    }

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            if (isVisible()) {
                toFront();
                return;
            }
            restore();
        }
        super.setVisible(visible);
    }

    private void persist() {
        if (prefs != null) {
            prefs.setBoolean(KEY_SOURCE_DIRS_RECURSIVE, checkBoxSourceDirsRecursive.isSelected());
            prefs.setBoolean(KEY_COMPARE_ONLY_EQUAL_DATES, checkBoxCompareOnlyEqualDates.isSelected());
            prefs.setStringCollection(KEY_SOURCE_DIRS, FileUtil.getAbsolutePathnames(sourceDirectoriesListModel.getDirs()));
        }
    }

    private void restore() {
        if (prefs != null) {
            checkBoxSourceDirsRecursive.setSelected(prefs.containsKey(KEY_SOURCE_DIRS_RECURSIVE)
                    ? prefs.getBoolean(KEY_SOURCE_DIRS_RECURSIVE)
                    : true);
            checkBoxCompareOnlyEqualDates.setSelected(prefs.containsKey(KEY_COMPARE_ONLY_EQUAL_DATES)
                    ? prefs.getBoolean(KEY_COMPARE_ONLY_EQUAL_DATES)
                    : false);
            if (prefs.containsKey(KEY_SOURCE_DIRS)) {
                sourceDirectoriesListModel.setDirs(FileUtil.getStringsAsFiles(prefs.getStringCollection(KEY_SOURCE_DIRS)));
            }
        }
    }

    @Override
    protected void escape() {
        persist();
        super.escape();
    }

    private static class SourceDirectoriesListModel implements ListModel<File> {

        private final DefaultListModel<File> delegate = new DefaultListModel<>();

        @Override
        public int getSize() {
            return delegate.getSize();
        }

        @Override
        public File getElementAt(int index) {
            return delegate.getElementAt(index);
        }

        @Override
        public void addListDataListener(ListDataListener l) {
            delegate.addListDataListener(l);
        }

        @Override
        public void removeListDataListener(ListDataListener l) {
            delegate.removeListDataListener(l);
        }

        private void remove(File dir) {
            delegate.removeElement(dir);
        }

        private void add(File dir) {
            if (dir.isDirectory() && !delegate.contains(dir)) {
                delegate.addElement(dir);
                ListUtil.sort(delegate, dirSortComparator);
            }
        }

        private List<File> getDirs() {
            return ListUtil.getElements(delegate);
        }

        private void setDirs(List<File> dirs) {
            delegate.clear();
            for (File dir : dirs) {
                add(dir);
            }
        }
    }

    private static final Comparator<File> dirSortComparator = new Comparator<File>() {

        private final Comparator<String> delegate = String.CASE_INSENSITIVE_ORDER;

        @Override
        public int compare(File o1, File o2) {
            String name1 = o1.getName();
            String name2 = o2.getName();
            return delegate.compare(name1, name2);
        }
    };

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        panelContent = new javax.swing.JPanel();
        labelInfo = new javax.swing.JLabel();
        panelSourceDirectories = new javax.swing.JPanel();
        scrollPaneSourceDirectories = new javax.swing.JScrollPane();
        listSourceDirectories = new javax.swing.JList<>();
        panelSourceDirectoriesActions = new javax.swing.JPanel();
        checkBoxSourceDirsRecursive = new javax.swing.JCheckBox();
        buttonAddSourceDirectory = new javax.swing.JButton();
        buttonRemoveSourceDirectories = new javax.swing.JButton();
        panelOptions = new javax.swing.JPanel();
        checkBoxCompareOnlyEqualDates = new javax.swing.JCheckBox();
        buttonSearch = new javax.swing.JToggleButton();
        panelResult = new javax.swing.JPanel();
        scrollPaneResult = new javax.swing.JScrollPane();
        panelResultActions = new javax.swing.JPanel();
        buttonDeleteSelectedFiles = new javax.swing.JButton();

        setTitle("Doppelte Bilder finden");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        panelContent.setLayout(new java.awt.GridBagLayout());

        labelInfo.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        labelInfo.setText("Doppelte Bilder sind Bilder, bei denen Byte für Byte identisch ist.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        panelContent.add(labelInfo, gridBagConstraints);

        panelSourceDirectories.setBorder(javax.swing.BorderFactory.createTitledBorder("Ordner, in denen gesucht wird"));
        panelSourceDirectories.setLayout(new java.awt.GridBagLayout());

        listSourceDirectories.setModel(sourceDirectoriesListModel);
        scrollPaneSourceDirectories.setViewportView(listSourceDirectories);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panelSourceDirectories.add(scrollPaneSourceDirectories, gridBagConstraints);

        panelSourceDirectoriesActions.setLayout(new java.awt.GridBagLayout());

        checkBoxSourceDirsRecursive.setText("Ordner darunter einbeziehen");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panelSourceDirectoriesActions.add(checkBoxSourceDirsRecursive, gridBagConstraints);

        buttonAddSourceDirectory.setText("Ordner hinzufügen...");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panelSourceDirectoriesActions.add(buttonAddSourceDirectory, gridBagConstraints);

        buttonRemoveSourceDirectories.setText("Ausgewählte Ordner entfernen");
        buttonRemoveSourceDirectories.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        panelSourceDirectoriesActions.add(buttonRemoveSourceDirectories, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panelSourceDirectories.add(panelSourceDirectoriesActions, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panelContent.add(panelSourceDirectories, gridBagConstraints);

        panelOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Optionen"));
        panelOptions.setLayout(new java.awt.GridBagLayout());

        checkBoxCompareOnlyEqualDates.setText("Nur vergleichen, falls Datum und Uhrzeit der Dateien gleich sind");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panelOptions.add(checkBoxCompareOnlyEqualDates, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panelContent.add(panelOptions, gridBagConstraints);

        buttonSearch.setText("Suche starten");
        buttonSearch.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        panelContent.add(buttonSearch, gridBagConstraints);

        panelResult.setBorder(javax.swing.BorderFactory.createTitledBorder("Gefundene Duplikate"));
        panelResult.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        panelResult.add(scrollPaneResult, gridBagConstraints);

        panelResultActions.setLayout(new java.awt.GridBagLayout());

        buttonDeleteSelectedFiles.setText("Ausgewählte löschen");
        buttonDeleteSelectedFiles.setEnabled(false);
        panelResultActions.add(buttonDeleteSelectedFiles, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panelResult.add(panelResultActions, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        panelContent.add(panelResult, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        getContentPane().add(panelContent, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                FindDuplicatesDialog dialog = new FindDuplicatesDialog();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAddSourceDirectory;
    private javax.swing.JButton buttonDeleteSelectedFiles;
    private javax.swing.JButton buttonRemoveSourceDirectories;
    private javax.swing.JToggleButton buttonSearch;
    private javax.swing.JCheckBox checkBoxCompareOnlyEqualDates;
    private javax.swing.JCheckBox checkBoxSourceDirsRecursive;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JList<File> listSourceDirectories;
    private javax.swing.JPanel panelContent;
    private javax.swing.JPanel panelOptions;
    private javax.swing.JPanel panelResult;
    private javax.swing.JPanel panelResultActions;
    private javax.swing.JPanel panelSourceDirectories;
    private javax.swing.JPanel panelSourceDirectoriesActions;
    private javax.swing.JScrollPane scrollPaneResult;
    private javax.swing.JScrollPane scrollPaneSourceDirectories;
    // End of variables declaration//GEN-END:variables

}
