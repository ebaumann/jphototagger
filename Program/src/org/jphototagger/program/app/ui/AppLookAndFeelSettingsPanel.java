package org.jphototagger.program.app.ui;

import java.awt.Component;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.ComboBoxModel;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import org.jphototagger.api.preferences.Preferences;
import org.jphototagger.api.windows.LookAndFeelProvider;
import org.jphototagger.api.windows.OptionPageProvider;
import org.jphototagger.lib.api.PositionProviderAscendingComparator;
import org.jphototagger.lib.util.Bundle;
import org.jphototagger.lib.util.StringUtil;
import org.openide.util.Lookup;
import org.openide.util.lookup.ServiceProvider;

/**
 * @author Elmar Baumann
 */
@ServiceProvider(service = OptionPageProvider.class)
public class AppLookAndFeelSettingsPanel extends javax.swing.JPanel implements OptionPageProvider {

    private static final long serialVersionUID = 1L;
    private boolean listen = true;

    public AppLookAndFeelSettingsPanel() {
        initComponents();
        postInitComponents();
    }

    private void postInitComponents() {
        editorPaneDescription.setBackground(getBackground());
        editorPaneDescription.setFont(labelInfo.getFont());
        selectInitLaf();
    }

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public String getTitle() {
        return Bundle.getString(AppLookAndFeelSettingsPanel.class, "AppLookAndFeelSettingsPanel.Title");
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    @Override
    public boolean isMiscOptionPage() {
        return true;
    }

    @Override
    public int getPosition() {
        return 50000;
    }

    private void persistLaf() {
        String key = ((LookAndFeelProvider)lafComboBoxModel.getSelectedItem()).getPreferencesKey();
        Preferences prefs = Lookup.getDefault().lookup(Preferences.class);
        prefs.setString(AppLookAndFeel.PREF_KEY_LOOK_AND_FEEL, key);
    }

    private void selectInitLaf() {
        Preferences prefs = Lookup.getDefault().lookup(Preferences.class);
        String laf = prefs.getString(AppLookAndFeel.PREF_KEY_LOOK_AND_FEEL);
        if (!StringUtil.hasContent(laf)) {
            laf = "DefaultLookAndFeelProvider";
        }
        for (LookAndFeelProvider provider : Lookup.getDefault().lookupAll(LookAndFeelProvider.class)) {
            if (laf.equals(provider.getPreferencesKey())) {
                listen = false;
                comboBoxLaf.setSelectedItem(provider);
                persistLaf();
                setDescription();
                listen = true;
            }
        }
    }

    private void setDescription() {
        String description = ((LookAndFeelProvider)lafComboBoxModel.getSelectedItem()).getDescription();
        editorPaneDescription.setText(description);
    }

    private final ComboBoxModel<LookAndFeelProvider> lafComboBoxModel = new DefaultComboBoxModel<LookAndFeelProvider>() {

        private static final long serialVersionUID = 1L;

        {
            List<LookAndFeelProvider> providers = new ArrayList<>(Lookup.getDefault().lookupAll(LookAndFeelProvider.class));
            Collections.sort(providers, PositionProviderAscendingComparator.INSTANCE);
            for (LookAndFeelProvider provider : providers) {
                addElement(provider);
            }
        }
    };

    private final ListCellRenderer<LookAndFeelProvider> lafListCellRenderer = new ListCellRenderer<LookAndFeelProvider>() {

        private final DefaultListCellRenderer delegate = new DefaultListCellRenderer();

        @Override
        public Component getListCellRendererComponent(JList<? extends LookAndFeelProvider> list, LookAndFeelProvider value, int index, boolean isSelected, boolean cellHasFocus) {
            JLabel label = (JLabel) delegate.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
            label.setText(value.getDisplayname());
            return label;
        }
    };

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        panelContent = new javax.swing.JPanel();
        labelInfo = new javax.swing.JLabel();
        comboBoxLaf = new JComboBox<>();
        scrollPane = new javax.swing.JScrollPane();
        editorPaneDescription = new javax.swing.JEditorPane();

        setLayout(new java.awt.GridBagLayout());

        panelContent.setLayout(new java.awt.GridBagLayout());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jphototagger/program/app/ui/Bundle"); // NOI18N
        labelInfo.setText(bundle.getString("AppLookAndFeelSettingsPanel.labelInfo.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        panelContent.add(labelInfo, gridBagConstraints);

        comboBoxLaf.setModel(lafComboBoxModel);
        comboBoxLaf.setRenderer(lafListCellRenderer);
        comboBoxLaf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxLafActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panelContent.add(comboBoxLaf, gridBagConstraints);

        scrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("AppLookAndFeelSettingsPanel.scrollPane.border.title"))); // NOI18N

        editorPaneDescription.setEditable(false);
        editorPaneDescription.setContentType("text/html"); // NOI18N
        scrollPane.setViewportView(editorPaneDescription);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        panelContent.add(scrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
        add(panelContent, gridBagConstraints);
    }//GEN-END:initComponents

    private void comboBoxLafActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxLafActionPerformed
        if (listen) {
            persistLaf();
            setDescription();
        }
    }//GEN-LAST:event_comboBoxLafActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<LookAndFeelProvider> comboBoxLaf;
    private javax.swing.JEditorPane editorPaneDescription;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JPanel panelContent;
    private javax.swing.JScrollPane scrollPane;
    // End of variables declaration//GEN-END:variables
}
