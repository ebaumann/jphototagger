package org.jphototagger.program.view.dialogs;

import org.jphototagger.program.data.Program;
import org.jphototagger.program.database.DatabasePrograms.Type;
import org.jphototagger.program.model.ListModelPrograms;
import org.jphototagger.program.resource.GUI;
import org.jphototagger.program.resource.JptBundle;
import org.jphototagger.program.UserSettings;
import org.jphototagger.program.view.renderer.ListCellRendererActions;
import org.jphototagger.program.view.renderer.ListCellRendererPrograms;
import org.jphototagger.lib.componentutil.MnemonicUtil;
import org.jphototagger.lib.dialog.Dialog;

import java.awt.Container;
import java.awt.event.MouseEvent;

/**
 * Dialog to select an {@link org.jphototagger.program.data.Program}.
 *
 * @author Elmar Baumann
 */
public class ProgramSelectDialog extends Dialog {
    private static final long serialVersionUID = -8970433115513988650L;
    private final ListModelPrograms model;
    private final Type type;
    private boolean accepted;

    public ProgramSelectDialog(Type type) {
        super(GUI.getAppFrame(), true, UserSettings.INSTANCE.getSettings(), null);

        if (type == null) {
            throw new NullPointerException("type == null");
        }

        this.type = type;
        model = new ListModelPrograms(type);
        initComponents();
        MnemonicUtil.setMnemonics((Container) this);
    }

    /**
     * Returns whether the dialog was closed throug the button with the meaning:
     * Select this program.
     *
     * @return  true if a program was selected
     */
    public boolean isAccepted() {
        return accepted;
    }

    /**
     * Returns the selected program.
     *
     * @return program or null if no program was selected. You can determine
     *         whether an program was selected through {@link #isAccepted()}.
     */
    public Program getSelectedProgram() {
        Program program  = null;
        int     selectedIndex = listPrograms.getSelectedIndex();

        if (selectedIndex >= 0) {
            int modelIndex = listPrograms.convertIndexToModel(selectedIndex);

            program = (Program) model.get(modelIndex);
        }

        return program;
    }

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            accepted = false;
        }

        super.setVisible(visible);
    }

    private void handleMousClicked(MouseEvent evt) {
        int selectedIndex = listPrograms.getSelectedIndex();
        boolean isSelected = selectedIndex >= 0;

        if ((evt.getClickCount() >= 2) && isSelected) {
            handleButtonSelectAction();
        }

        buttonSelect.setEnabled(isSelected);
    }

    private void handleButtonSelectAction() {
        accepted = true;
        setVisible(false);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPanePrograms = new javax.swing.JScrollPane();
        listPrograms = new org.jdesktop.swingx.JXList();
        buttonSelect = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(type.equals(Type.ACTION) ? org.jphototagger.program.resource.JptBundle.INSTANCE.getString("ProgramSelectDialog.Title.Actions") : org.jphototagger.program.resource.JptBundle.INSTANCE.getString("ProgramSelectDialog.Title.Programs"));
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        scrollPanePrograms.setFocusable(false);
        scrollPanePrograms.setName("scrollPanePrograms"); // NOI18N

        listPrograms.setModel(model);
        listPrograms.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listPrograms.setCellRenderer(type.equals(Type.ACTION) ? new ListCellRendererActions() : new ListCellRendererPrograms());
        listPrograms.setName("listPrograms"); // NOI18N
        listPrograms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listProgramsMouseClicked(evt);
            }
        });
        scrollPanePrograms.setViewportView(listPrograms);

        buttonSelect.setText(JptBundle.INSTANCE.getString("ProgramSelectDialog.buttonSelect.text")); // NOI18N
        buttonSelect.setEnabled(false);
        buttonSelect.setName("buttonSelect"); // NOI18N
        buttonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(scrollPanePrograms, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonSelect)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPanePrograms, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSelect)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listProgramsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listProgramsMouseClicked
        handleMousClicked(evt);
    }//GEN-LAST:event_listProgramsMouseClicked

    private void buttonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectActionPerformed
        handleButtonSelectAction();
    }//GEN-LAST:event_buttonSelectActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ProgramSelectDialog dialog =
                    new ProgramSelectDialog(Type.PROGRAM);

                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSelect;
    private org.jdesktop.swingx.JXList listPrograms;
    private javax.swing.JScrollPane scrollPanePrograms;
    // End of variables declaration//GEN-END:variables
}
