/*
 * @(#)ProgramSelectDialog.java    Created on 2009-06-07
 *
 * Copyright (C) 2009-2010 by the JPhotoTagger developer team.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA  02110-1301, USA.
 */

package org.jphototagger.program.view.dialogs;

import org.jphototagger.program.data.Program;
import org.jphototagger.program.database.DatabasePrograms.Type;
import org.jphototagger.program.model.ListModelPrograms;
import org.jphototagger.program.resource.GUI;
import org.jphototagger.program.resource.JptBundle;
import org.jphototagger.program.UserSettings;
import org.jphototagger.program.view.renderer.ListCellRendererActions;
import org.jphototagger.program.view.renderer.ListCellRendererPrograms;
import org.jphototagger.lib.componentutil.MnemonicUtil;
import org.jphototagger.lib.dialog.Dialog;

import java.awt.Container;
import java.awt.event.MouseEvent;

/**
 * Dialog to select an {@link org.jphototagger.program.data.Program}.
 *
 * @author Elmar Baumann
 */
public class ProgramSelectDialog extends Dialog {
    private static final long       serialVersionUID = -8970433115513988650L;
    private final ListModelPrograms model;
    private final Type              type;
    private boolean                 accepted;

    /**
     * Contructor.
     *
     * @param type type
     */
    public ProgramSelectDialog(Type type) {
        super(GUI.INSTANCE.getAppFrame(), true,
              UserSettings.INSTANCE.getSettings(), null);

        if (type == null) {
            throw new NullPointerException("type == null");
        }

        this.type = type;
        model     = new ListModelPrograms(type);
        initComponents();
        MnemonicUtil.setMnemonics((Container) this);
    }

    /**
     * Returns whether the dialog was closed throug the button with the meaning:
     * Select this program.
     *
     * @return  true if a program was selected
     */
    public boolean isAccepted() {
        return accepted;
    }

    /**
     * Returns the selected program.
     *
     * @return program or null if no program was selected. You can determine
     *         whether an program was selected through {@link #isAccepted()}.
     */
    public Program getSelectedProgram() {
        Program program  = null;
        int     selIndex = listPrograms.getSelectedIndex();

        if (selIndex >= 0) {
            program = (Program) model.get(selIndex);
        }

        return program;
    }

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            accepted = false;
        }

        super.setVisible(visible);
    }

    private void handleMousClicked(MouseEvent evt) {
        int     selIndex   = listPrograms.getSelectedIndex();
        boolean isSelected = selIndex >= 0;

        if ((evt.getClickCount() >= 2) && isSelected) {
            handleButtonSelectAction();
        }

        buttonSelect.setEnabled(isSelected);
    }

    private void handleButtonSelectAction() {
        accepted = true;
        setVisible(false);
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        scrollPanePrograms = new javax.swing.JScrollPane();
        listPrograms       = new javax.swing.JList();
        buttonSelect       = new javax.swing.JButton();
        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(type.equals(Type.ACTION)
                 ? JptBundle.INSTANCE.getString(
                     "ProgramSelectDialog.Title.Actions")
                 : JptBundle.INSTANCE.getString(
                     "ProgramSelectDialog.Title.Programs"));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        scrollPanePrograms.setFocusable(false);
        listPrograms.setModel(model);
        listPrograms.setSelectionMode(
            javax.swing.ListSelectionModel.SINGLE_SELECTION);
        listPrograms.setCellRenderer(type.equals(Type.ACTION)
                                     ? new ListCellRendererActions()
                                     : new ListCellRendererPrograms());
        listPrograms.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listProgramsMouseClicked(evt);
            }
        });
        scrollPanePrograms.setViewportView(listPrograms);
        buttonSelect.setText(
            JptBundle.INSTANCE.getString(
                "ProgramSelectDialog.buttonSelect.text"));    // NOI18N
        buttonSelect.setEnabled(false);
        buttonSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSelectActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout =
            new javax.swing.GroupLayout(getContentPane());

        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(
                javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                layout.createSequentialGroup().addContainerGap().addGroup(
                    layout.createParallelGroup(
                        javax.swing.GroupLayout.Alignment.LEADING).addGroup(
                        layout.createSequentialGroup().addComponent(
                            scrollPanePrograms,
                            javax.swing.GroupLayout.DEFAULT_SIZE, 313,
                            Short.MAX_VALUE).addGap(12, 12, 12)).addGroup(
                                javax.swing.GroupLayout.Alignment.TRAILING,
                                layout.createSequentialGroup().addComponent(
                                    buttonSelect).addContainerGap()))));
        layout.setVerticalGroup(layout
            .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup().addContainerGap()
                .addComponent(scrollPanePrograms,
                              javax.swing.GroupLayout.DEFAULT_SIZE, 141,
                              Short.MAX_VALUE)
                                  .addPreferredGap(javax.swing.LayoutStyle
                                      .ComponentPlacement.RELATED)
                                          .addComponent(buttonSelect)
                                          .addContainerGap()));
        pack();
    }    // </editor-fold>//GEN-END:initComponents

    private void listProgramsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listProgramsMouseClicked
        handleMousClicked(evt);
    }//GEN-LAST:event_listProgramsMouseClicked

    private void buttonSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSelectActionPerformed
        handleButtonSelectAction();
    }//GEN-LAST:event_buttonSelectActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                ProgramSelectDialog dialog =
                    new ProgramSelectDialog(Type.PROGRAM);

                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton     buttonSelect;
    private javax.swing.JList       listPrograms;
    private javax.swing.JScrollPane scrollPanePrograms;

    // End of variables declaration//GEN-END:variables
}
