/*
 * JPhotoTagger tags and finds images fast
 * Copyright (C) 2009 by the developer team, resp. Elmar Baumann<eb@elmar-baumann.de>
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
 */
package de.elmar_baumann.jpt.view.panels;

import de.elmar_baumann.jpt.UserSettings;
import de.elmar_baumann.jpt.resource.Bundle;
import de.elmar_baumann.lib.componentutil.TreeUtil;
import javax.swing.JTree;
import javax.swing.tree.TreeSelectionModel;

/**
 * A tree for hierarchical keywords.
 *
 * @author  Elmar Baumann <eb@elmar-baumann.de>
 * @version 2009-07-10
 */
public class HierarchicalKeywordsPanel extends javax.swing.JPanel {

    private static final String KEY_TREE =
            "HierarchicalKeywordsPanel.Tree.SelectedNode";

    public HierarchicalKeywordsPanel() {
        initComponents();
        postInitComponents();
    }

    private void postInitComponents() {
        tree.getSelectionModel().setSelectionMode(
                TreeSelectionModel.DISCONTIGUOUS_TREE_SELECTION);
    }

    public JTree getTree() {
        return tree;
    }

    /**
     * Reads the persistent properties, currently the selected tree node.
     */
    public void readProperties() {
        UserSettings.INSTANCE.getSettings().getTree(tree, KEY_TREE);
    }

    /**
     * Writes the persistent properties, currently the selected tree node.
     */
    public void writeProperties() {
        UserSettings.INSTANCE.getSettings().setTree(tree, KEY_TREE);
        UserSettings.INSTANCE.writeToFile();
    }

    /**
     * Expands or collapses all tree nodes and synchronizes the toggle button
     * for expanding and collapsing.
     *
     * @param expand true if expand, false if collapse
     */
    public void expandAll(boolean expand) {
        boolean buttonPressed = buttonToggleExpandAllNodes.isSelected();
        if (buttonPressed != expand) {
            buttonToggleExpandAllNodes.doClick();
        }
    }

    /**
     * Returns wether all nodes expanded.
     *
     * @return true if all nodes expanded
     */
    public boolean isExpandedAll() {
        return buttonToggleExpandAllNodes.isSelected();
    }

    private void handleButtonToggleExpandAllNodesActionPerformed() {
        boolean selected = buttonToggleExpandAllNodes.isSelected();
        TreeUtil.expandAll(tree, selected);
        buttonToggleExpandAllNodes.setText(
                selected
                ? Bundle.getString("HierarchicalKeywordsPanel.ButtonToggleExpandAllNodes.Selected")
                : Bundle.getString("HierarchicalKeywordsPanel.ButtonToggleExpandAllNodes.DeSelected"));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        buttonToggleExpandAllNodes = new javax.swing.JToggleButton();

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.setCellRenderer(new de.elmar_baumann.jpt.view.renderer.TreeCellRendererHierarchicalKeywords());
        tree.setDragEnabled(true);
        tree.setShowsRootHandles(true);
        scrollPane.setViewportView(tree);
        tree.setTransferHandler(new de.elmar_baumann.jpt.datatransfer.TransferHandlerTreeHierarchicalKeywords());

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/elmar_baumann/jpt/resource/properties/Bundle");
        buttonToggleExpandAllNodes.setText(bundle.getString("HierarchicalKeywordsPanel.buttonToggleExpandAllNodes.text"));
        buttonToggleExpandAllNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToggleExpandAllNodesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(112, Short.MAX_VALUE)
                .addComponent(buttonToggleExpandAllNodes)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(scrollPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonToggleExpandAllNodes)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonToggleExpandAllNodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleExpandAllNodesActionPerformed
        handleButtonToggleExpandAllNodesActionPerformed();
    }//GEN-LAST:event_buttonToggleExpandAllNodesActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton buttonToggleExpandAllNodes;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
}
