package org.jphototagger.lib.swing;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

/**
 * Nichtmodaler Dialog mit Fortschrittsbalken.
 *
 * @author Elmar Baumann
 */
public final class ProgressDialog extends javax.swing.JDialog {
    private static final long serialVersionUID = 1L;
    private final Set<ActionListener> actionListeners = new CopyOnWriteArraySet<>();
    private boolean closeEnabled = true;

    /**
     * Konstruktor.
     *
     * @param parent      Elternframe
     */
    public ProgressDialog(java.awt.Frame parent) {
        super(parent, false);
        initComponents();
    }

    /**
     * Adds an action listener. It is called, when a user clicks the stop
     * button.
     *
     * @param listener  action listener
     */
    public void addActionListener(ActionListener listener) {
        if (listener == null) {
            throw new NullPointerException("listener == null");
        }

        actionListeners.add(listener);
    }

    /**
     * Removes an action listener.
     *
     * @param listener  action listener
     */
    public void removeActionListener(ActionListener listener) {
        if (listener == null) {
            throw new NullPointerException("listener == null");
        }

        actionListeners.remove(listener);
    }

    /**
     * Setzt den aktuellen Zustand des Fortschrittsbalkens.
     *
     * @param value Wert
     */
    public void setValue(int value) {
        progressBar.setValue(value);
    }

    /**
     * Setzt das Minimum des Fortschrittsbalkens.
     *
     * @param minimum Minimum
     */
    public void setMinimum(int minimum) {
        progressBar.setMinimum(minimum);
    }

    /**
     * Setzt das Maximum des Fortschrittsbalkens.
     *
     * @param maximum Maximum
     */
    public void setMaximum(int maximum) {
        progressBar.setMaximum(maximum);
    }

    /**
     * Anzuzeigender Text Ã¼ber Fortschrittsbalken.
     *
     * @param text  Text
     */
    public void setInfoText(String text) {
        if (text == null) {
            throw new NullPointerException("text == null");
        }

        labelInfo.setText(text);
    }

    /**
     * Sets the text below the progress bar to give detailled info about the
     * current progress.
     *
     * @param text  text
     */
    public void setCurrentProgressInfoText(String text) {
        if (text == null) {
            throw new NullPointerException("text == null");
        }

        labelProgressInfo.setText(text);
    }

    /**
     * Sets the progress bar in the indeterminate state.
     *
     * @param indeterminate  true, if indeterminate
     */
    public void setIndeterminate(boolean indeterminate) {
        progressBar.setIndeterminate(indeterminate);
    }

    /**
     * Sets the progress bar string painted (progress bar displays a string).
     *
     * @param stringPainted true, if string painted
     */
    public void setStringPainted(boolean stringPainted) {
        progressBar.setStringPainted(stringPainted);
    }

    public void setProgressBarString(String string) {
        if (string == null) {
            throw new NullPointerException("string == null");
        }

        progressBar.setString(string);
    }

    /**
     * Enables closing the dialog.
     *
     * @param enabled  true, if enabled. Default: true.
     */
    public void setEnabledClose(boolean enabled) {
        closeEnabled = enabled;
    }

    /**
     * Sets the stop button enabled.
     *
     * @param stop  true, if enabled. Default: true.
     */
    public void setEnabledStop(boolean stop) {
        buttonStop.setEnabled(stop);
    }

    private void stop() {
        if (closeEnabled) {
            for (ActionListener listener : actionListeners) {
                listener.actionPerformed(new ActionEvent(this, 0, "Stop"));
            }

            setVisible(false);
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")

    private void initComponents() {//GEN-BEGIN:initComponents

        labelInfo = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        buttonStop = new javax.swing.JButton();
        labelProgressInfo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jphototagger/lib/swing/Bundle"); // NOI18N
        setTitle(bundle.getString("ProgressDialog.title")); // NOI18N
        setName("Form"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        labelInfo.setText("Info"); // NOI18N
        labelInfo.setName("labelInfo"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        buttonStop.setText(bundle.getString("ProgressDialog.buttonStop.text")); // NOI18N
        buttonStop.setName("buttonStop"); // NOI18N
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });

        labelProgressInfo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        labelProgressInfo.setName("labelProgressInfo"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelProgressInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 493, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonStop))
                    .addComponent(labelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 560, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonStop)
                    .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(labelProgressInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buttonStop, progressBar});

        pack();
    }//GEN-END:initComponents

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        stop();
    }//GEN-LAST:event_buttonStopActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        stop();
    }//GEN-LAST:event_formWindowClosing

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonStop;
    private javax.swing.JLabel labelInfo;
    private javax.swing.JLabel labelProgressInfo;
    private javax.swing.JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
