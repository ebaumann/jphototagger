package org.jphototagger.kml;

import java.io.IOException;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.List;

/**
 * A <strong>Keyhole Markup Language</strong> Document.
 * <p>
 * Doc: http://code.google.com/intl/de/apis/kml/documentation/kmlreference.html
 *
 * @author Elmar Baumann
 */
public final class KMLDocument {

    private static final String CHARSET = "UTF-8";
    private static final String NEWLINE = System.getProperty("line.separator");
    private String generator;
    private final List<KMLElement> elements = new ArrayList<>();

    /**
     * Sets the generator of this document. Appears as Comment in the head.
     *
     * <em>Does not check yet within the string characters that have to be
     * escaped for generating a valid XML document! A generator string with
     * specific XML characters, e.g. &lt; or &gt; will result into an invalid
     * document!</em>
     *
     * @param generator generator
     */
    public void setGenerator(String generator) {
        if (generator == null) {
            throw new NullPointerException("generator == null");
        }

        this.generator = generator;
    }

    /**
     * Adds an element to this document.
     *
     * @param  element element
     * @throws         IllegalArgumentException if not
     *                 {@code KMLElement#isTopLevelElement()}
     */
    public void addElement(KMLElement element) {
        if (element == null) {
            throw new NullPointerException("element == null");
        }

        if (!element.isTopLevelElement()) {
            throw new IllegalArgumentException("Not a top level element: " + element.getClass());
        }

        elements.add(element);
    }

    /**
     * Writes this document into an output stream UTF-8 encoded. The elements
     * are appearing in the same order as added.
     *
     * @param  os output stream
     * @throws    UnsupportedEncodingException if the system does not support
     *            UTF-8 strings
     * @throws IOException thrown through {@code OutputStream#write(byte[])}
     */
    public void write(OutputStream os) throws UnsupportedEncodingException, IOException {
        writeHeader(os);
        writeElements(os);
        writeFooter(os);
    }

    private void writeHeader(OutputStream os) throws IOException {
        write(os, "<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
        writeLine(os, "<kml xmlns=\"http://www.opengis.net/kml/2.2\">");
        writeGenerator(os);
        writeLine(os, "<Document>");
    }

    private void writeGenerator(OutputStream os) throws IOException {
        if ((generator != null) && !generator.trim().isEmpty()) {
            writeLine(os, "<!--Generated by " + generator.trim() + "-->");
        }
    }

    private void writeFooter(OutputStream os) throws IOException {
        writeLine(os, "</Document>");
        writeLine(os, "</kml>");
    }

    private void writeElements(OutputStream os) throws UnsupportedEncodingException, IOException {
        for (KMLElement element : elements) {
            writeLine(os, element.toXML());
        }
    }

    private static void write(OutputStream os, String s) throws UnsupportedEncodingException, IOException {
        os.write(s.getBytes(CHARSET));
    }

    private static void writeLine(OutputStream os, String s) throws UnsupportedEncodingException, IOException {
        os.write(NEWLINE.getBytes(CHARSET));
        write(os, s);
    }
}
