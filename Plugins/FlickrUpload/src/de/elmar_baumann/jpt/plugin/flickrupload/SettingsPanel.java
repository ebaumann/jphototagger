/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package de.elmar_baumann.jpt.plugin.flickrupload;

import java.util.Properties;
import java.util.ResourceBundle;
import javax.swing.JOptionPane;

/**
 * 
 *
 * @author  Elmar Baumann <eb@elmar-baumann.de>
 * @version 2010-02-13
 */
public class SettingsPanel extends javax.swing.JPanel {

    private static final long       serialVersionUID = -7766362003081534388L;
    private              Properties properties;

    public SettingsPanel() {
        initComponents();
    }

    public SettingsPanel(Properties properties) {
        this.properties = properties;
        initComponents();
        initUsername();
    }

    public void setProperties(Properties p) {
        properties = p;
        initUsername();
    }

    private void initUsername() {
        String username = FlickrUpload.getUsername(properties);
        if (username != null && !username.trim().isEmpty()) {
            textFieldUsername.setText(username);
        }
    }

    private void save() {
        String username        = textFieldUsername.getText().trim();
        String password        = new String(passwordField.getPassword()).trim();
        String passwordConfirm = new String(passwordFieldConfirm.getPassword()).trim();

        if (username.isEmpty() || password.isEmpty() || passwordConfirm.isEmpty()) {
            JOptionPane.showMessageDialog(null, getErrorMessageEmpty());
            return;
        }
        
        if (!checkChangePassword()) return;
        if (!checkPasswordsEquals(password, passwordConfirm)) return;

        FlickrUpload.saveUsername(username, properties);
        JOptionPane.showMessageDialog(null, FlickrUpload.savePassword(password, properties)
                ? getInfoMessageSavePassword()
                : getErrorMessageSavePassword()
                );
    }

    private boolean checkPasswordsEquals(String p1, String p2) {
        if (!p1.equals(p2)) {
            JOptionPane.showMessageDialog(null, getPasswordsNotEqualErrorMessage());
            return false;
        }
        return true;
    }

    private boolean checkChangePassword() {
        String password = FlickrUpload.getPassword(properties);
        if (password == null) return true;

        PasswordConfirmDialog dlg = new PasswordConfirmDialog();
        dlg.setVisible(true);
        if (!dlg.isAccepted()) return false;

        String oldPassword = dlg.getPassword();

        if (oldPassword == null || oldPassword.trim().isEmpty()) return false;
        if (!oldPassword.equals(password)) {
            JOptionPane.showMessageDialog(null, getPasswordConfirmErrorMessage());
            return false;
        }
        return true;
    }

    private String getPasswordsNotEqualErrorMessage() {
        return ResourceBundle.getBundle("de/elmar_baumann/jpt/plugin/flickrupload/Bundle").
                getString("FlickrUpload.SettingsPanel.Error.PasswordsNotEqual");
    }

    private String getPasswordConfirmErrorMessage() {
        return ResourceBundle.getBundle("de/elmar_baumann/jpt/plugin/flickrupload/Bundle").
                getString("FlickrUpload.SettingsPanel.Error.PasswordsConfirm");
    }

    private String getErrorMessageEmpty() {
        return ResourceBundle.getBundle("de/elmar_baumann/jpt/plugin/flickrupload/Bundle").
                getString("FlickrUpload.SettingsPanel.Error.Empty");
    }

    private String getInfoMessageSavePassword() {
        return ResourceBundle.getBundle("de/elmar_baumann/jpt/plugin/flickrupload/Bundle").
                getString("FlickrUpload.SettingsPanel.Info.SavePassword");
    }

    private String getErrorMessageSavePassword() {
        return ResourceBundle.getBundle("de/elmar_baumann/jpt/plugin/flickrupload/Bundle").
                getString("FlickrUpload.SettingsPanel.Error.SavePassword");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelUsername = new javax.swing.JLabel();
        textFieldUsername = new javax.swing.JTextField();
        labelPassword = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        buttonSave = new javax.swing.JButton();
        labelPasswordConfirm = new javax.swing.JLabel();
        passwordFieldConfirm = new javax.swing.JPasswordField();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/elmar_baumann/jpt/plugin/flickrupload/Bundle"); // NOI18N
        labelUsername.setText(bundle.getString("SettingsPanel.labelUsername.text")); // NOI18N

        labelPassword.setText(bundle.getString("SettingsPanel.labelPassword.text")); // NOI18N

        buttonSave.setMnemonic('s');
        buttonSave.setText(bundle.getString("SettingsPanel.buttonSave.text")); // NOI18N
        buttonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSaveActionPerformed(evt);
            }
        });

        labelPasswordConfirm.setText(bundle.getString("SettingsPanel.labelPasswordConfirm.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelUsername)
                            .addComponent(labelPassword)
                            .addComponent(labelPasswordConfirm))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(passwordFieldConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(buttonSave, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {passwordField, textFieldUsername});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelUsername)
                    .addComponent(textFieldUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelPassword)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordFieldConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelPasswordConfirm))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonSave)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {passwordField, textFieldUsername});

    }// </editor-fold>//GEN-END:initComponents

    private void buttonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSaveActionPerformed
        save();
    }//GEN-LAST:event_buttonSaveActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSave;
    private javax.swing.JLabel labelPassword;
    private javax.swing.JLabel labelPasswordConfirm;
    private javax.swing.JLabel labelUsername;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JPasswordField passwordFieldConfirm;
    private javax.swing.JTextField textFieldUsername;
    // End of variables declaration//GEN-END:variables
}
