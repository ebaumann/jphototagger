package de.elmar_baumann.lib.component;

import java.awt.Color;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

// Most parts of code from http://www.exampledepot.com/egs/javax.swing.text/ta_Console.html
/**
 * Writes an the system's standard output to a text area.
 *
 * Starts after calling {@link #caputure()}.
 *
 * @author  Elmar Baumann <eb@elmar-baumann.de>
 * @version 2009/05/31
 */
public class SystemOutputPanel extends JPanel {

    private static volatile int MAX_CHAR_COUNT = 100000;
    private static volatile int MAX_CHARS_EXESS = 1000;
    private final PipedInputStream piOut;
    private final PipedInputStream piErr;
    private final PipedOutputStream poOut;
    private final PipedOutputStream poErr;

    /**
     * Default constructor.
     *
     * Call later {@link #caputure()}.
     * @throws IOException
     */
    public SystemOutputPanel() throws IOException {
        initComponents();
        piOut = new PipedInputStream();
        poOut = new PipedOutputStream(piOut);
        piErr = new PipedInputStream();
        poErr = new PipedOutputStream(piErr);
        new ReaderThread(piOut).start();
        new ReaderThread(piErr).start();
    }

    /**
     * Starts to capture the system's standard output and standard error stream.
     * Redirects it via {@link System#setOut(java.io.PrintStream)} and
     * {@link System#setErr(java.io.PrintStream)}.
     */
    public void caputure() {
        System.setOut(new PrintStream(poOut, true));
        System.setErr(new PrintStream(poErr, true));
    }

    public void setTextForeground(Color color) {
        textArea.setForeground(color);
    }

    public void setTextBackground(Color color) {
        textArea.setBackground(color);
    }

    public void setInitText(String text) {
        textArea.append(text);
    }

    private class ReaderThread extends Thread {

        PipedInputStream pi;

        ReaderThread(PipedInputStream pi) {
            this.pi = pi;
        }

        @Override
        public void run() {
            final byte[] buf = new byte[1024];
            try {
                while (true) {
                    final int len = pi.read(buf);
                    if (len == -1) {
                        break;
                    }
                    SwingUtilities.invokeLater(new Runnable() {

                        @Override
                        public void run() {
                            textArea.append(new String(buf, 0, len));

                            // Make sure the last line is always visible
                            textArea.setCaretPosition(textArea.getDocument().
                                    getLength());

                            // Keep the text area down to a certain character size
                            int excess = textArea.getDocument().getLength() -
                                    MAX_CHAR_COUNT;
                            if (excess >= MAX_CHARS_EXESS) {
                                textArea.replaceRange("", 0, excess);
                            }
                        }
                    });
                }
            } catch (IOException e) {
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        textArea.setColumns(1);
        textArea.setEditable(false);
        textArea.setLineWrap(true);
        textArea.setTabSize(4);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/elmar_baumann/lib/resource/Bundle"); // NOI18N
        textArea.setToolTipText(bundle.getString("SystemOutputPanel.textArea.toolTipText")); // NOI18N
        textArea.setWrapStyleWord(true);
        scrollPane.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 49, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
