package de.elmar_baumann.imagemetadataviewer.view.panels;

import de.elmar_baumann.imagemetadataviewer.UserSettings;
import de.elmar_baumann.imagemetadataviewer.data.AutoCompleteData;
import de.elmar_baumann.imagemetadataviewer.data.TextEntry;
import de.elmar_baumann.imagemetadataviewer.database.metadata.Column;
import de.elmar_baumann.imagemetadataviewer.resource.Bundle;
import de.elmar_baumann.imagemetadataviewer.view.renderer.RendererTableColumn;
import de.elmar_baumann.lib.thirdparty.neil_cochrane.CompleterTextField;
import java.util.LinkedHashSet;
import javax.swing.JTextField;

/**
 * Panel zum Eingeben einzeiliger Texte.
 * 
 * @author  Elmar Baumann <eb@elmar-baumann.de>
 * @version 2008/09/18
 */
public class TextEntryEditFieldPanel extends javax.swing.JPanel
    implements TextEntry {

    private Column xmpColumn;
    private static final boolean isAutocomplete = UserSettings.getInstance().isUseAutocomplete();

    public TextEntryEditFieldPanel(Column xmpColumn) {
        this.xmpColumn = xmpColumn;
        initComponents();
        setPropmt();
    }

    @Override
    public String getText() {
        return textFieldEdit.getText();
    }

    @Override
    public void setText(String text) {
        // Sonderbehandlung wegen Autocomplete
        textFieldEdit.selectAll();
        if (text.isEmpty()) {
            textFieldEdit.setText(isAutocomplete ? " " : ""); // NOI18N
            textFieldEdit.selectAll();
        } else {
            textFieldEdit.setText(text.trim());
        }
    }

    @Override
    public Column getColumn() {
        return xmpColumn;
    }

    private void setPropmt() {
        labelPrompt.setText(RendererTableColumn.getDescriptionWithoutDefinition(xmpColumn));
    }

    @Override
    public boolean isEmpty() {
        return textFieldEdit.getText().isEmpty();
    }

    @Override
    public void focus() {
        textFieldEdit.requestFocus();
    }

    @Override
    public void setEditable(boolean editable) {
        textFieldEdit.setEditable(editable);
    }

    private LinkedHashSet<Column> getColumnHashSet() {
        LinkedHashSet<Column> set = new LinkedHashSet<Column>();
        set.add(xmpColumn);
        return set;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        labelPrompt = new javax.swing.JLabel();
        textFieldEdit = isAutocomplete ? new CompleterTextField(new AutoCompleteData(getColumnHashSet()).toArray(), false) : new JTextField();

        setLayout(new java.awt.GridBagLayout());

        labelPrompt.setText(Bundle.getString("TextEntryEditFieldPanel.labelPrompt.text")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(labelPrompt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(textFieldEdit, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel labelPrompt;
    public javax.swing.JTextField textFieldEdit;
    // End of variables declaration//GEN-END:variables
}
