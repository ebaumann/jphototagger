package de.elmar_baumann.imv.view.dialogs;

import de.elmar_baumann.imv.UserSettings;
import de.elmar_baumann.imv.app.AppIcons;
import de.elmar_baumann.imv.resource.Bundle;
import de.elmar_baumann.imv.view.panels.HierarchicalKeywordsPanel;
import de.elmar_baumann.imv.view.renderer.ListCellRendererCategories;
import de.elmar_baumann.imv.view.renderer.ListCellRendererKeywords;
import de.elmar_baumann.lib.dialog.Dialog;
import de.elmar_baumann.lib.util.Settings;
import javax.swing.ListModel;

/**
 * Dialog for input assistance.
 *
 * @author  Elmar Baumann <eb@elmar-baumann.de>
 * @version 2007-07-10
 */
public class InputHelperDialog extends Dialog {

    public static final InputHelperDialog INSTANCE =
            new InputHelperDialog();
    private static final String KEY_LIST_KEYWORDS =
            "InputHelperDialog.ListKeywords";
    private static final String KEY_LIST_CATEGORIES =
            "InputHelperDialog.ListCategories";
    private static final String KEY_SEL_INDEX_TABBED_PANE =
            "InputHelperDialog.SelIndexTabbedPane";

    public InputHelperDialog() {
        super((java.awt.Frame) null, false);
        initComponents();
        postInitComponents();
    }

    private void postInitComponents() {
        setIconImages(AppIcons.getAppIcons());
        setHelpContentsUrl(Bundle.getString("Help.Url.Contents")); // NOI18N
        setHelpPageUrl(Bundle.getString("Help.Url.InputHelpers")); // NOI18N
        registerKeyStrokes();
    }

    public void setModelCategories(ListModel model) {
        listCategories.setModel(model);
    }

    public void setModelKeywords(ListModel model) {
        listKeywords.setModel(model);
    }

    private void readProperties() {
        Settings settings = UserSettings.INSTANCE.getSettings();
        panelHierarchicalKeywords.readProperties();
        settings.getListContent(listKeywords, KEY_LIST_KEYWORDS);
        settings.getListContent(listCategories, KEY_LIST_CATEGORIES);
        int selIndexTabbedPane = settings.getInt(KEY_SEL_INDEX_TABBED_PANE);
        if (selIndexTabbedPane >= 0) {
            tabbedPane.setSelectedIndex(selIndexTabbedPane);
        }
        settings.getSizeAndLocation(this);
    }

    private void writeProperties() {
        Settings settings = UserSettings.INSTANCE.getSettings();
        settings.setSizeAndLocation(this);
        settings.setListContent(listKeywords, KEY_LIST_KEYWORDS);
        settings.setListContent(listCategories, KEY_LIST_CATEGORIES);
        settings.setInt(tabbedPane.getSelectedIndex(), KEY_SEL_INDEX_TABBED_PANE);
        panelHierarchicalKeywords.writeProperties();
        UserSettings.INSTANCE.writeToFile();
    }

    public HierarchicalKeywordsPanel getPanelKeywords() {
        return panelHierarchicalKeywords;
    }

    @Override
    public void setVisible(boolean visible) {
        if (visible) {
            readProperties();
        } else {
            writeProperties();
        }
        super.setVisible(visible);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        panelHierarchicalKeywords = new de.elmar_baumann.imv.view.panels.HierarchicalKeywordsPanel();
        panelKeywords = new javax.swing.JPanel();
        scrollPaneKeywords = new javax.swing.JScrollPane();
        listKeywords = new javax.swing.JList();
        panelCategories = new javax.swing.JPanel();
        scrollPaneCategories = new javax.swing.JScrollPane();
        listCategories = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(Bundle.getString("InputHelperDialog.title")); // NOI18N
        setAlwaysOnTop(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        tabbedPane.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        tabbedPane.addTab(Bundle.getString("InputHelperDialog.panelHierarchicalKeywords.TabConstraints.tabTitle"), panelHierarchicalKeywords); // NOI18N

        listKeywords.setToolTipText(Bundle.getString("InputHelperDialog.listKeywords.toolTipText")); // NOI18N
        listKeywords.setCellRenderer(new ListCellRendererKeywords());
        listKeywords.setDragEnabled(true);
        scrollPaneKeywords.setViewportView(listKeywords);
        listKeywords.setTransferHandler(de.elmar_baumann.imv.datatransfer.TransferHandlerDragListItemsString.KEYWORDS);

        javax.swing.GroupLayout panelKeywordsLayout = new javax.swing.GroupLayout(panelKeywords);
        panelKeywords.setLayout(panelKeywordsLayout);
        panelKeywordsLayout.setHorizontalGroup(
            panelKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneKeywords, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );
        panelKeywordsLayout.setVerticalGroup(
            panelKeywordsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneKeywords, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );

        tabbedPane.addTab(Bundle.getString("InputHelperDialog.panelKeywords.TabConstraints.tabTitle"), panelKeywords); // NOI18N

        listCategories.setToolTipText(Bundle.getString("InputHelperDialog.listCategories.toolTipText")); // NOI18N
        listCategories.setCellRenderer(new ListCellRendererCategories());
        listCategories.setDragEnabled(true);
        scrollPaneCategories.setViewportView(listCategories);
        listCategories.setTransferHandler(de.elmar_baumann.imv.datatransfer.TransferHandlerDragListItemsString.CATEGORIES);

        javax.swing.GroupLayout panelCategoriesLayout = new javax.swing.GroupLayout(panelCategories);
        panelCategories.setLayout(panelCategoriesLayout);
        panelCategoriesLayout.setHorizontalGroup(
            panelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneCategories, javax.swing.GroupLayout.DEFAULT_SIZE, 273, Short.MAX_VALUE)
        );
        panelCategoriesLayout.setVerticalGroup(
            panelCategoriesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(scrollPaneCategories, javax.swing.GroupLayout.DEFAULT_SIZE, 353, Short.MAX_VALUE)
        );

        tabbedPane.addTab(Bundle.getString("InputHelperDialog.panelCategories.TabConstraints.tabTitle"), panelCategories); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 378, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setVisible(false);
    }//GEN-LAST:event_formWindowClosing

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                InputHelperDialog dialog =
                        new InputHelperDialog();
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList listCategories;
    private javax.swing.JList listKeywords;
    private javax.swing.JPanel panelCategories;
    private de.elmar_baumann.imv.view.panels.HierarchicalKeywordsPanel panelHierarchicalKeywords;
    private javax.swing.JPanel panelKeywords;
    private javax.swing.JScrollPane scrollPaneCategories;
    private javax.swing.JScrollPane scrollPaneKeywords;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
