package de.elmar_baumann.imv.view.panels;

import de.elmar_baumann.imv.UserSettings;
import de.elmar_baumann.imv.resource.Bundle;
import de.elmar_baumann.lib.componentutil.TreeUtil;
import javax.swing.JMenuItem;
import javax.swing.JTree;
import javax.swing.tree.TreeSelectionModel;

/**
 * A tree for hierarchical keywords.
 * 
 * @author  Elmar Baumann <eb@elmar-baumann.de>
 * @version 2009-07-10
 */
public class HierarchicalKeywordsPanel extends javax.swing.JPanel {

    private static final String KEY_TREE =
            "HierarchicalKeywordsPanel.Tree.SelectedNode"; // NOI18N

    public HierarchicalKeywordsPanel() {
        initComponents();
        postInitComponents();
    }

    private void postInitComponents() {
        tree.getSelectionModel().setSelectionMode(
                TreeSelectionModel.SINGLE_TREE_SELECTION);
    }

    public JTree getTree() {
        return tree;
    }

    public JMenuItem getMenuItemAdd() {
        return menuItemAdd;
    }

    public JMenuItem getMenuItemRemove() {
        return menuItemRemove;
    }

    public JMenuItem getMenuItemRename() {
        return menuItemRename;
    }

    public JMenuItem getMenuItemToggleReal() {
        return menuItemToggleReal;
    }

    public JMenuItem getMenuItemAddToEditPanel() {
        return menuItemAddToEditPanel;
    }

    /**
     * Reads the persistent properties, currently the selected tree node.
     */
    public void readProperties() {
        UserSettings.INSTANCE.getSettings().getTree(tree, KEY_TREE);
    }

    /**
     * Writes the persistent properties, currently the selected tree node.
     */
    public void writeProperties() {
        UserSettings.INSTANCE.getSettings().setTree(tree, KEY_TREE);
        UserSettings.INSTANCE.writeToFile();
    }

    /**
     * Expands or collapses all tree nodes and synchronizes the toggle button
     * for expanding and collapsing.
     *
     * @param expand true if expand, false if collapse
     */
    public void expandAll(boolean expand) {
        boolean buttonPressed = buttonToggleExpandAllNodes.isSelected();
        if (buttonPressed != expand) {
            buttonToggleExpandAllNodes.doClick();
        }
    }

    /**
     * Returns wether all nodes expanded.
     *
     * @return true if all nodes expanded
     */
    public boolean isExpandedAll() {
        return buttonToggleExpandAllNodes.isSelected();
    }

    private void handleButtonToggleExpandAllNodesActionPerformed() {
        boolean selected = buttonToggleExpandAllNodes.isSelected();
        TreeUtil.expandAll(tree, selected);
        buttonToggleExpandAllNodes.setText(
                selected
                ? Bundle.getString(
                "HierarchicalKeywordsPanel.ButtonToggleExpandAllNodes.Selected") // NOI18N
                : Bundle.getString(
                "HierarchicalKeywordsPanel.ButtonToggleExpandAllNodes.DeSelected")); // NOI18N
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popupMenu = new javax.swing.JPopupMenu();
        menuItemAdd = new javax.swing.JMenuItem();
        menuItemRemove = new javax.swing.JMenuItem();
        menuItemRename = new javax.swing.JMenuItem();
        menuItemToggleReal = new javax.swing.JMenuItem();
        menuItemAddToEditPanel = new javax.swing.JMenuItem();
        scrollPane = new javax.swing.JScrollPane();
        tree = new javax.swing.JTree();
        buttonToggleExpandAllNodes = new javax.swing.JToggleButton();

        menuItemAdd.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        menuItemAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/elmar_baumann/imv/resource/icons/icon_add.png"))); // NOI18N
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("de/elmar_baumann/imv/resource/properties/Bundle"); // NOI18N
        menuItemAdd.setText(bundle.getString("HierarchicalKeywordsPanel.menuItemAdd.text")); // NOI18N
        popupMenu.add(menuItemAdd);

        menuItemRemove.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        menuItemRemove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/elmar_baumann/imv/resource/icons/icon_remove.png"))); // NOI18N
        menuItemRemove.setText(bundle.getString("HierarchicalKeywordsPanel.menuItemRemove.text")); // NOI18N
        popupMenu.add(menuItemRemove);

        menuItemRename.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        menuItemRename.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/elmar_baumann/imv/resource/icons/icon_rename.png"))); // NOI18N
        menuItemRename.setText(bundle.getString("HierarchicalKeywordsPanel.menuItemRename.text")); // NOI18N
        popupMenu.add(menuItemRename);

        menuItemToggleReal.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuItemToggleReal.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/elmar_baumann/imv/resource/icons/icon_keyword_real_helper.png"))); // NOI18N
        menuItemToggleReal.setText(bundle.getString("HierarchicalKeywordsPanel.menuItemToggleReal.text")); // NOI18N
        popupMenu.add(menuItemToggleReal);

        menuItemAddToEditPanel.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        menuItemAddToEditPanel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/de/elmar_baumann/imv/resource/icons/icon_edit.png"))); // NOI18N
        menuItemAddToEditPanel.setMnemonic('a');
        menuItemAddToEditPanel.setText(bundle.getString("HierarchicalKeywordsPanel.menuItemAddToEditPanel.text")); // NOI18N
        popupMenu.add(menuItemAddToEditPanel);

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        tree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        tree.setCellRenderer(new de.elmar_baumann.imv.view.renderer.TreeCellRendererHierarchicalKeywords());
        tree.setComponentPopupMenu(popupMenu);
        tree.setDragEnabled(true);
        tree.setShowsRootHandles(true);
        scrollPane.setViewportView(tree);
        tree.setTransferHandler(new de.elmar_baumann.imv.datatransfer.TransferHandlerTreeHierarchicalKeywords());

        buttonToggleExpandAllNodes.setText(bundle.getString("HierarchicalKeywordsPanel.buttonToggleExpandAllNodes.text")); // NOI18N
        buttonToggleExpandAllNodes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonToggleExpandAllNodesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(buttonToggleExpandAllNodes))
            .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 229, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonToggleExpandAllNodes))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonToggleExpandAllNodesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonToggleExpandAllNodesActionPerformed
        handleButtonToggleExpandAllNodesActionPerformed();
    }//GEN-LAST:event_buttonToggleExpandAllNodesActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton buttonToggleExpandAllNodes;
    private javax.swing.JMenuItem menuItemAdd;
    private javax.swing.JMenuItem menuItemAddToEditPanel;
    private javax.swing.JMenuItem menuItemRemove;
    private javax.swing.JMenuItem menuItemRename;
    private javax.swing.JMenuItem menuItemToggleReal;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTree tree;
    // End of variables declaration//GEN-END:variables
}
